name: Build
on:
  push:
    # branches:
    #   - main
    # tags:
  pull_request:
env:
  CARGO_TERM_COLOR: always
jobs:
  # based on 
  # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
  # in case a tag was set, a binary release will be made
  create-release-on-tags:
    name: Create a new release on tags
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RG_VERSION: TEST-0.0.0
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rg_version: ${{ env.RG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"
      - name: Create GitHub release
        if: startsWith(github.ref, 'refs/tags')
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RG_VERSION }}
          release_name: ${{ env.RG_VERSION }}

  build:
    # in case this is a binary release, we make sure to wait
    # for any requirement
    needs: ['create-release-on-tags']
    runs-on: ubuntu-latest
    steps:
      # rust compiler for running tests
      - uses: actions/checkout@v2
      - name: Install latest stable (for linux-gnu)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy
          # override: true
      # rust compiler for creating binaries
      - name: Install latest stable (for wasm)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
          # override: true
      # caching (cargo registry)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ubuntu-latest-stable-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo index)
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ubuntu-latest-stable-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo wasm artifacts)
      - name: Cache cargo wasm build (including docs)
        uses: actions/cache@v1
        with:
          path: target/wasm32-unknown-unknown
          key: ubuntu-latest-stable-cargo-release-target-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo testing artifacts)
      - name: Cache cargo linux-gnu build (for testing)
        uses: actions/cache@v1
        with:
          path: target/x86_64-unknown-linux-gnu
          key: ubuntu-latest-stable-cargo-release-target-${{ hashFiles('**/Cargo.toml') }}
      # binary requirements (binaryen)
      # based on
      # https://github.com/rustwasm/walrus/blob/9d6c9de432d6a97478dc76ebdf18aed51584c3af/.github/workflows/main.yml#L56
      - name: Install binaryen
        run: |
          set -e
          binaryen-version_105-x86_64-linux.tar.gz
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz | tar xzf -
          echo "`pwd`/binaryen-version_105" > $GITHUB_PATH
      # build and strips the wasm binaries; copies them to ./res/
      - name: Build wasm binaries and the doc
        run: ./build.sh
      # run the tests (which depend on the binaries from ./res/)
      - name: Run native tests
        run: ./test.sh -- --nocapture
        
      # TODO: activate. Needs secrets.GITHUB_TOKEN to be configured.

      # based on 
      # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
      # in case a tag was set, a binary release will be made.
      # creates a file archive containing the wasm binaries into ./contracts-(tags).tar.gz
      # - name: Build archive
      #   if: startsWith(github.ref, 'refs/tags')
      #   shell: bash
      #   run: |
      #     staging="contracts-${{ needs.create-release-on-tags.outputs.rg_version }}"
      #     mkdir -p "$staging"
      #     cp README.md "$staging/"
      #     cp res/*.wasm "$staging/"
      #     tar czf "$staging.tar.gz" "$staging"
      #     echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      # - name: Upload release archive
      #   if: startsWith(github.ref, 'refs/tags')
      #   uses: actions/upload-release-asset@v1.0.1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ needs.create-release-on-tags.outputs.upload_url }}
      #     asset_path: ${{ env.ASSET }}
      #     asset_name: ${{ env.ASSET }}
      #     asset_content_type: application/octet-stream
  
  # TODO: publish docs to github-pages?
